name: Self-hosted runner (scheduled)

on:
  push:
    branches:
      - ci_*
  repository_dispatch:
  schedule:
    - cron: "0 0 * * *"

# REFERENCES TO BE USED ACROSS JOBS
references:
  init: &init
    - uses: actions/checkout@v2
    - name: Loading cache.
      uses: actions/cache@v2
      id: cache
      with:
        path: .env
        key: v0-slow_tests_tf_torch_gpu-${{ hashFiles('setup.py') }}

  env_info: &env_info
    - name: Python version
      run: |
        which python
        python --version
        pip --version
    - name: Current dir
      run: pwd
    - run: nvidia-smi

  create_virtual_env_with_torch: &create_virtual_env_with_torch
    - name: Create new python env (on self-hosted runners we have to handle isolation ourselves)
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m venv .env
        source .env/bin/activate
        which python
        python --version
        pip --version
    - name: Install dependencies
      run: |
        source .env/bin/activate
        pip install --upgrade pip
        pip install torch!=1.6.0
        pip install .[sklearn,testing,onnxruntime]
        pip install git+https://github.com/huggingface/datasets
    - name: Are GPUs recognized by our DL frameworks
      run: |
        source .env/bin/activate
        python -c "import torch; print('Cuda available:', torch.cuda.is_available())"
        python -c "import torch; print('Number of GPUs available:', torch.cuda.device_count())"

  create_virtual_env_with_tf: &create_virtual_env_with_tf
    - name: Create new python env (on self-hosted runners we have to handle isolation ourselves)
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m venv .env
        source .env/bin/activate
        which python
        python --version
        pip --version
    - name: Install dependencies
      run: |
        source .env/bin/activate
        pip install --upgrade pip
        pip install .[tf,sklearn,testing,onnxruntime]
        pip install git+https://github.com/huggingface/datasets

    - name: Are GPUs recognized by our DL frameworks
      run: |
        source .env/bin/activate
        TF_CPP_MIN_LOG_LEVEL=3 python -c "import tensorflow as tf; print('TF GPUs available:', bool(tf.config.list_physical_devices('GPU')))"
        TF_CPP_MIN_LOG_LEVEL=3 python -c "import tensorflow as tf; print('Number of TF GPUs available:', len(tf.config.list_physical_devices('GPU')))"

  run_tests: &run_tests
    - name: Run all tests on GPU
      env:
        OMP_NUM_THREADS: 1
        RUN_SLOW: yes
        USE_CUDA: yes
      run: |
        source .env/bin/activate
        python -m pytest -n 1 --dist=loadfile -s ./tests/

  run_example_tests: &run_example_tests
    - name: Run examples tests on GPU
      env:
        OMP_NUM_THREADS: 1
        RUN_SLOW: yes
        USE_CUDA: yes
      run: |
        source .env/bin/activate
        pip install -r examples/requirements.txt
        python -m pytest -n 1 --dist=loadfile -s examples



jobs:
  run_all_tests_torch_gpu:
    runs-on: [self-hosted, single-gpu]
    steps:
      - *init
      - *env_info
      - *create_virtual_env_with_torch
      - *run_tests

  run_examples_torch_gpu:
    runs-on: [self-hosted, single-gpu]
    steps:
      - *init
      - *env_info
      - *create_virtual_env_with_torch
      - *run_example_tests

  run_all_tests_tf_gpu:
    runs-on: [self-hosted, single-gpu]
    steps:
      - *init
      - *env_info
      - *create_virtual_env_with_tf
      - *run_tests

  run_examples_tf_gpu:
    runs-on: [self-hosted, single-gpu]
    steps:
      - *init
      - *env_info
      - *create_virtual_env_with_tf
      - *run_example_tests

  run_all_tests_torch_multiple_gpu:
    runs-on: [self-hosted, multi-gpu]
    steps:
      - *init
      - *env_info
      - *create_virtual_env_with_torch
      - *run_tests

  run_examples_torch_multiple_gpu:
    runs-on: [self-hosted, multi-gpu]
    steps:
      - *init
      - *env_info
      - *create_virtual_env_with_torch
      - *run_example_tests

  run_all_tests_tf_multiple_gpu:
    runs-on: [self-hosted, multi-gpu]
    steps:
      - *init
      - *env_info
      - *create_virtual_env_with_tf
      - *run_tests

  run_examples_tf_multiple_gpu:
    runs-on: [self-hosted, multi-gpu]
    steps:
      - *init
      - *env_info
      - *create_virtual_env_with_tf
      - *run_example_tests
